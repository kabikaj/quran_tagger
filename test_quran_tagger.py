#!/usr/bin/env python3
#
#    test_util.py
#
# usage:
#
#   apply all tests:
#     $ python test_quran_tagger.py
#     $ python -m unittest test_quran_tagger
#
#   apply specific test
#     $ python -m unittest quran_tagger.TestTagger
#
#################################################################################
"""tests based on 0110HasanBasri.FadailMakka.JK000644-ara1"""


import unittest
from argparse import ArgumentParser
import re

from quran_tagger import tagger


class TestTagger(unittest.TestCase):

    def test_tagger_basmallah(self):
        t = "ضصث شس ضكصت هضقأيشب بسم الله الرحمن الرحيم شكث شكتثش"
        words = re.split(" +", t)
        exp = [
            (
                (4, 7),
                [
                    ([1, 1, 1], [1, 1, 4], 0, 3),
                    ([2, 1, 1], [2, 1, 4], 29, 32),
                    ([3, 1, 1], [3, 1, 4], 6149, 6152),
                    ([4, 1, 1], [4, 1, 4], 9634, 9637),
                    ([5, 1, 1], [5, 1, 4], 13385, 13388),
                    ([6, 1, 1], [6, 1, 4], 16193, 16196),
                    ([7, 1, 1], [7, 1, 4], 19247, 19250),
                    ([8, 1, 1], [8, 1, 4], 22571, 22574),
                    ([10, 1, 1], [10, 1, 4], 26306, 26309),
                    ([11, 1, 1], [11, 1, 4], 28143, 28146),
                    ([12, 1, 1], [12, 1, 4], 30064, 30067),
                    ([13, 1, 1], [13, 1, 4], 31845, 31848),
                    ([14, 1, 1], [14, 1, 4], 32702, 32705),
                    ([15, 1, 1], [15, 1, 4], 33536, 33539),
                    ([16, 1, 1], [16, 1, 4], 34195, 34198),
                    ([17, 1, 1], [17, 1, 4], 36043, 36046),
                    ([18, 1, 1], [18, 1, 4], 37603, 37606),
                    ([19, 1, 1], [19, 1, 4], 39186, 39189),
                    ([20, 1, 1], [20, 1, 4], 40151, 40154),
                    ([21, 1, 1], [21, 1, 4], 41490, 41493),
                    ([22, 1, 1], [22, 1, 4], 42663, 42666),
                    ([23, 1, 1], [23, 1, 4], 43941, 43944),
                    ([24, 1, 1], [24, 1, 4], 44995, 44998),
                    ([25, 1, 1], [25, 1, 4], 46315, 46318),
                    ([26, 1, 1], [26, 1, 4], 47212, 47215),
                    ([27, 1, 1], [27, 1, 4], 48534, 48537),
                    ([27, 30, 5], [27, 30, 8], 48887, 48890),
                    ([28, 1, 1], [28, 1, 4], 49689, 49692),
                    ([29, 1, 1], [29, 1, 4], 51123, 51126),
                    ([30, 1, 1], [30, 1, 4], 52103, 52106),
                    ([31, 1, 1], [31, 1, 4], 52924, 52927),
                    ([32, 1, 1], [32, 1, 4], 53474, 53477),
                    ([33, 1, 1], [33, 1, 4], 53850, 53853),
                    ([34, 1, 1], [34, 1, 4], 55141, 55144),
                    ([35, 1, 1], [35, 1, 4], 56028, 56031),
                    ([36, 1, 1], [36, 1, 4], 56807, 56810),
                    ([37, 1, 1], [37, 1, 4], 57536, 57539), 
                    ([38, 1, 1], [38, 1, 4], 58401, 58404), 
                    ([39, 1, 1], [39, 1, 4], 59138, 59141), 
                    ([40, 1, 1], [40, 1, 4], 60314, 60317), 
                    ([41, 1, 1], [41, 1, 4], 61537, 61540), 
                    ([42, 1, 1], [42, 1, 4], 62335, 62338), 
                    ([43, 1, 1], [43, 1, 4], 63199, 63202), 
                    ([44, 1, 1], [44, 1, 4], 64033, 64036), 
                    ([45, 1, 1], [45, 1, 4], 64383, 64386), 
                    ([46, 1, 1], [46, 1, 4], 64875, 64878), 
                    ([47, 1, 1], [47, 1, 4], 65522, 65525), 
                    ([48, 1, 1], [48, 1, 4], 66065, 66068), 
                    ([49, 1, 1], [49, 1, 4], 66629, 66632), 
                    ([50, 1, 1], [50, 1, 4], 66980, 66983), 
                    ([51, 1, 1], [51, 1, 4], 67357, 67360), 
                    ([52, 1, 1], [52, 1, 4], 67721, 67724), 
                    ([53, 1, 1], [53, 1, 4], 68037, 68040), 
                    ([54, 1, 1], [54, 1, 4], 68401, 68404), 
                    ([55, 1, 1], [55, 1, 4], 68747, 68750), 
                    ([56, 1, 1], [56, 1, 4], 69102, 69105), 
                    ([57, 1, 1], [57, 1, 4], 69485, 69488), 
                    ([58, 1, 1], [58, 1, 4], 70063, 70066), 
                    ([59, 1, 1], [59, 1, 4], 70539, 70542), 
                    ([60, 1, 1], [60, 1, 4], 70988, 70991), 
                    ([61, 1, 1], [61, 1, 4], 71340, 71343), 
                    ([62, 1, 1], [62, 1, 4], 71565, 71568), 
                    ([63, 1, 1], [63, 1, 4], 71744, 71747), 
                    ([64, 1, 1], [64, 1, 4], 71928, 71931), 
                    ([65, 1, 1], [65, 1, 4], 72173, 72176), 
                    ([66, 1, 1], [66, 1, 4], 72464, 72467), 
                    ([67, 1, 1], [67, 1, 4], 72717, 72720), 
                    ([68, 1, 1], [68, 1, 4], 73054, 73057), 
                    ([69, 1, 1], [69, 1, 4], 73358, 73361), 
                    ([70, 1, 1], [70, 1, 4], 73620, 73623), 
                    ([71, 1, 1], [71, 1, 4], 73841, 73844), 
                    ([72, 1, 1], [72, 1, 4], 74071, 74074), 
                    ([73, 1, 1], [73, 1, 4], 74360, 74363), 
                    ([74, 1, 1], [74, 1, 4], 74563, 74566), 
                    ([75, 1, 1], [75, 1, 4], 74822, 74825), 
                    ([76, 1, 1], [76, 1, 4], 74990, 74993), 
                    ([77, 1, 1], [77, 1, 4], 75237, 75240), 
                    ([78, 1, 1], [78, 1, 4], 75422, 75425), 
                    ([79, 1, 1], [79, 1, 4], 75599, 75602), 
                    ([80, 1, 1], [80, 1, 4], 75782, 75785), 
                    ([81, 1, 1], [81, 1, 4], 75919, 75922), 
                    ([82, 1, 1], [82, 1, 4], 76027, 76030), 
                    ([83, 1, 1], [83, 1, 4], 76111, 76114), 
                    ([84, 1, 1], [84, 1, 4], 76284, 76287), 
                    ([85, 1, 1], [85, 1, 4], 76395, 76398), 
                    ([86, 1, 1], [86, 1, 4], 76508, 76511), 
                    ([87, 1, 1], [87, 1, 4], 76573, 76576), 
                    ([88, 1, 1], [88, 1, 4], 76649, 76652), 
                    ([89, 1, 1], [89, 1, 4], 76745, 76748), 
                    ([90, 1, 1], [90, 1, 4], 76886, 76889), 
                    ([91, 1, 1], [91, 1, 4], 76972, 76975), 
                    ([92, 1, 1], [92, 1, 4], 77030, 77033), 
                    ([93, 1, 1], [93, 1, 4], 77105, 77108), 
                    ([94, 1, 1], [94, 1, 4], 77149, 77152), 
                    ([95, 1, 1], [95, 1, 4], 77180, 77183), 
                    ([96, 1, 1], [96, 1, 4], 77218, 77221), 
                    ([97, 1, 1], [97, 1, 4], 77294, 77297), 
                    ([98, 1, 1], [98, 1, 4], 77328, 77331), 
                    ([99, 1, 1], [99, 1, 4], 77426, 77429), 
                    ([100, 1, 1], [100, 1, 4], 77466, 77469), 
                    ([101, 1, 1], [101, 1, 4], 77510, 77513), 
                    ([102, 1, 1], [102, 1, 4], 77550, 77553), 
                    ([103, 1, 1], [103, 1, 4], 77582, 77585), 
                    ([104, 1, 1], [104, 1, 4], 77600, 77603), 
                    ([105, 1, 1], [105, 1, 4], 77637, 77640), 
                    ([106, 1, 1], [106, 1, 4], 77664, 77667), 
                    ([107, 1, 1], [107, 1, 4], 77685, 77688), 
                    ([108, 1, 1], [108, 1, 4], 77714, 77717), 
                    ([109, 1, 1], [109, 1, 4], 77728, 77731), 
                    ([110, 1, 1], [110, 1, 4], 77758, 77761), 
                    ([111, 1, 1], [111, 1, 4], 77781, 77784), 
                    ([112, 1, 1], [112, 1, 4], 77808, 77811), 
                    ([113, 1, 1], [113, 1, 4], 77827, 77830), 
                    ([114, 1, 1], [114, 1, 4], 77854, 77857)
                ]
            )
        ]
        results = [m for m in tagger(words, debug=False, min_tokens=2, rasm_match=True, min_uncommon=0)]
        self.assertEqual(exp, results)


    def test_tagger_la_quwwa(self):
        t = "ذلك بيده ولا حول ولا قوة الا بالله العلي العظيم"
        words = re.split(" +", t)
        exp = [((4, 7), [([18, 39, 9], [18, 39, 12], 38229, 38232)])]
        results = [m for m in tagger(words, debug=True, min_tokens=2, rasm_match=True, min_uncommon=0)]
        self.assertEqual(exp, results)


    def test_tagger_bakka_min_2(self):
        t = "في مواضع عديدة فقال تعالى إن أول بيت وضع للناس للذي ببكة مباركا وهدى للعالمين فيه آيات بينات مقام إبراهيم ومن دخله كان آمنا وقال تعالى"
        words = re.split(" +", t)
        exp = [
            ((5, 23), [([3, 96, 1], [3, 97, 9], 7776, 7794)]),
            ((23, 24), [([6, 93, 16], [6, 93, 17], 17773, 17774), ([39, 49, 10], [39, 49, 11], 59935, 59936), ([49, 14, 3], [49, 14, 4], 66892, 66893)])
        ]
        results = [m for m in tagger(words, debug=True, min_tokens=2, rasm_match=True, min_uncommon=0)]
        self.assertEqual(exp, results)
    
    def test_tagger_bakka_min_3(self):
        t = "في مواضع عديدة فقال تعالى إن أول بيت وضع للناس للذي ببكة مباركا وهدى للعالمين فيه آيات بينات مقام إبراهيم ومن دخله كان آمنا وقال تعالى"
        words = re.split(" +", t)
        exp = [((5, 23), [([3, 96, 1], [3, 97, 9], 7776, 7794)])]
        results = [m for m in tagger(words, debug=True, min_tokens=3, rasm_match=True, min_uncommon=0)]
        self.assertEqual(exp, results)

    


if __name__ == '__main__':

    parser = ArgumentParser(description='apply all tests for quran_tagger')
    args = parser.parse_args()

    unittest.main()
